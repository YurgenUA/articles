// Code generated by proroc-gen-graphql, DO NOT EDIT.
package crud_brand

import (
	"context"

	"github.com/graphql-go/graphql"
	"github.com/pkg/errors"
	gql_ptypes_wrapperspb "github.com/ysugimoto/grpc-graphql-gateway/ptypes/wrapperspb"
	"github.com/ysugimoto/grpc-graphql-gateway/runtime"
	"google.golang.org/grpc"

	gql_ptypes_emptypb "github.com/ysugimoto/grpc-graphql-gateway/ptypes/emptypb"
)

var (
	gql__type_UpdateResponse   *graphql.Object      // message UpdateResponse in protobuf/brand.proto
	gql__type_UpdateRequest    *graphql.Object      // message UpdateRequest in protobuf/brand.proto
	gql__type_GetOneResponse   *graphql.Object      // message GetOneResponse in protobuf/brand.proto
	gql__type_GetListResponse  *graphql.Object      // message GetListResponse in protobuf/brand.proto
	gql__type_CreateResponse   *graphql.Object      // message CreateResponse in protobuf/brand.proto
	gql__type_CreateRequest    *graphql.Object      // message CreateRequest in protobuf/brand.proto
	gql__type_BrandRepo        *graphql.Object      // message BrandRepo in protobuf/brand.proto
	gql__type_Brand            *graphql.Object      // message Brand in protobuf/brand.proto
	gql__input_UpdateResponse  *graphql.InputObject // message UpdateResponse in protobuf/brand.proto
	gql__input_UpdateRequest   *graphql.InputObject // message UpdateRequest in protobuf/brand.proto
	gql__input_GetOneResponse  *graphql.InputObject // message GetOneResponse in protobuf/brand.proto
	gql__input_GetListResponse *graphql.InputObject // message GetListResponse in protobuf/brand.proto
	gql__input_CreateResponse  *graphql.InputObject // message CreateResponse in protobuf/brand.proto
	gql__input_CreateRequest   *graphql.InputObject // message CreateRequest in protobuf/brand.proto
	gql__input_BrandRepo       *graphql.InputObject // message BrandRepo in protobuf/brand.proto
	gql__input_Brand           *graphql.InputObject // message Brand in protobuf/brand.proto
)

func Gql__type_UpdateResponse() *graphql.Object {
	if gql__type_UpdateResponse == nil {
		gql__type_UpdateResponse = graphql.NewObject(graphql.ObjectConfig{
			Name: "CrudBrand_Type_UpdateResponse",
			Fields: graphql.Fields{
				"brand": &graphql.Field{
					Type: Gql__type_Brand(),
				},
			},
		})
	}
	return gql__type_UpdateResponse
}

func Gql__type_UpdateRequest() *graphql.Object {
	if gql__type_UpdateRequest == nil {
		gql__type_UpdateRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "CrudBrand_Type_UpdateRequest",
			Fields: graphql.Fields{
				"id": &graphql.Field{
					Type: gql_ptypes_wrapperspb.Gql__type_Int64Value(),
				},
				"brand": &graphql.Field{
					Type: Gql__type_Brand(),
				},
			},
		})
	}
	return gql__type_UpdateRequest
}

func Gql__type_GetOneResponse() *graphql.Object {
	if gql__type_GetOneResponse == nil {
		gql__type_GetOneResponse = graphql.NewObject(graphql.ObjectConfig{
			Name: "CrudBrand_Type_GetOneResponse",
			Fields: graphql.Fields{
				"brand": &graphql.Field{
					Type: Gql__type_Brand(),
				},
			},
		})
	}
	return gql__type_GetOneResponse
}

func Gql__type_GetListResponse() *graphql.Object {
	if gql__type_GetListResponse == nil {
		gql__type_GetListResponse = graphql.NewObject(graphql.ObjectConfig{
			Name: "CrudBrand_Type_GetListResponse",
			Fields: graphql.Fields{
				"brands": &graphql.Field{
					Type: graphql.NewList(Gql__type_Brand()),
				},
			},
		})
	}
	return gql__type_GetListResponse
}

func Gql__type_CreateResponse() *graphql.Object {
	if gql__type_CreateResponse == nil {
		gql__type_CreateResponse = graphql.NewObject(graphql.ObjectConfig{
			Name: "CrudBrand_Type_CreateResponse",
			Fields: graphql.Fields{
				"brand": &graphql.Field{
					Type: Gql__type_Brand(),
				},
			},
		})
	}
	return gql__type_CreateResponse
}

func Gql__type_CreateRequest() *graphql.Object {
	if gql__type_CreateRequest == nil {
		gql__type_CreateRequest = graphql.NewObject(graphql.ObjectConfig{
			Name:        "CrudBrand_Type_CreateRequest",
			Description: `Following messages are CRUD request/responses`,
			Fields: graphql.Fields{
				"brand": &graphql.Field{
					Type: Gql__type_Brand(),
				},
			},
		})
	}
	return gql__type_CreateRequest
}

func Gql__type_BrandRepo() *graphql.Object {
	if gql__type_BrandRepo == nil {
		gql__type_BrandRepo = graphql.NewObject(graphql.ObjectConfig{
			Name:        "CrudBrand_Type_BrandRepo",
			Description: `Repository file persistance message format`,
			Fields: graphql.Fields{
				"brands": &graphql.Field{
					Type: graphql.NewList(Gql__type_Brand()),
				},
			},
		})
	}
	return gql__type_BrandRepo
}

func Gql__type_Brand() *graphql.Object {
	if gql__type_Brand == nil {
		gql__type_Brand = graphql.NewObject(graphql.ObjectConfig{
			Name:        "CrudBrand_Type_Brand",
			Description: `Brand main entity`,
			Fields: graphql.Fields{
				"id": &graphql.Field{
					Type: graphql.Int,
				},
				"name": &graphql.Field{
					Type: graphql.String,
				},
				"year": &graphql.Field{
					Type: graphql.Int,
				},
			},
		})
	}
	return gql__type_Brand
}

func Gql__input_UpdateResponse() *graphql.InputObject {
	if gql__input_UpdateResponse == nil {
		gql__input_UpdateResponse = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "CrudBrand_Input_UpdateResponse",
			Fields: graphql.InputObjectConfigFieldMap{
				"brand": &graphql.InputObjectFieldConfig{
					Type: Gql__input_Brand(),
				},
			},
		})
	}
	return gql__input_UpdateResponse
}

func Gql__input_UpdateRequest() *graphql.InputObject {
	if gql__input_UpdateRequest == nil {
		gql__input_UpdateRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "CrudBrand_Input_UpdateRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"id": &graphql.InputObjectFieldConfig{
					Type: gql_ptypes_wrapperspb.Gql__input_Int64Value(),
				},
				"brand": &graphql.InputObjectFieldConfig{
					Type: Gql__input_Brand(),
				},
			},
		})
	}
	return gql__input_UpdateRequest
}

func Gql__input_GetOneResponse() *graphql.InputObject {
	if gql__input_GetOneResponse == nil {
		gql__input_GetOneResponse = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "CrudBrand_Input_GetOneResponse",
			Fields: graphql.InputObjectConfigFieldMap{
				"brand": &graphql.InputObjectFieldConfig{
					Type: Gql__input_Brand(),
				},
			},
		})
	}
	return gql__input_GetOneResponse
}

func Gql__input_GetListResponse() *graphql.InputObject {
	if gql__input_GetListResponse == nil {
		gql__input_GetListResponse = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "CrudBrand_Input_GetListResponse",
			Fields: graphql.InputObjectConfigFieldMap{
				"brands": &graphql.InputObjectFieldConfig{
					Type: graphql.NewList(Gql__input_Brand()),
				},
			},
		})
	}
	return gql__input_GetListResponse
}

func Gql__input_CreateResponse() *graphql.InputObject {
	if gql__input_CreateResponse == nil {
		gql__input_CreateResponse = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "CrudBrand_Input_CreateResponse",
			Fields: graphql.InputObjectConfigFieldMap{
				"brand": &graphql.InputObjectFieldConfig{
					Type: Gql__input_Brand(),
				},
			},
		})
	}
	return gql__input_CreateResponse
}

func Gql__input_CreateRequest() *graphql.InputObject {
	if gql__input_CreateRequest == nil {
		gql__input_CreateRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "CrudBrand_Input_CreateRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"brand": &graphql.InputObjectFieldConfig{
					Type: Gql__input_Brand(),
				},
			},
		})
	}
	return gql__input_CreateRequest
}

func Gql__input_BrandRepo() *graphql.InputObject {
	if gql__input_BrandRepo == nil {
		gql__input_BrandRepo = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "CrudBrand_Input_BrandRepo",
			Fields: graphql.InputObjectConfigFieldMap{
				"brands": &graphql.InputObjectFieldConfig{
					Type: graphql.NewList(Gql__input_Brand()),
				},
			},
		})
	}
	return gql__input_BrandRepo
}

func Gql__input_Brand() *graphql.InputObject {
	if gql__input_Brand == nil {
		gql__input_Brand = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "CrudBrand_Input_Brand",
			Fields: graphql.InputObjectConfigFieldMap{
				"id": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"name": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"year": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
			},
		})
	}
	return gql__input_Brand
}

// graphql__resolver_CrudService is a struct for making query, mutation and resolve fields.
// This struct must be implemented runtime.SchemaBuilder interface.
type graphql__resolver_CrudService struct {

	// Automatic connection host
	host string

	// grpc dial options
	dialOptions []grpc.DialOption

	// grpc client connection.
	// this connection may be provided by user
	conn *grpc.ClientConn
}

// new_graphql_resolver_CrudService creates pointer of service struct
func new_graphql_resolver_CrudService(conn *grpc.ClientConn) *graphql__resolver_CrudService {
	return &graphql__resolver_CrudService{
		conn: conn,
		host: "localhost:6001",
		dialOptions: []grpc.DialOption{
			grpc.WithInsecure(),
		},
	}
}

// CreateConnection() returns grpc connection which user specified or newly connected and closing function
func (x *graphql__resolver_CrudService) CreateConnection(ctx context.Context) (*grpc.ClientConn, func(), error) {
	// If x.conn is not nil, user injected their own connection
	if x.conn != nil {
		return x.conn, func() {}, nil
	}

	// Otherwise, this handler opens connection with specified host
	conn, err := grpc.DialContext(ctx, x.host, x.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	return conn, func() { conn.Close() }, nil
}

// GetQueries returns acceptable graphql.Fields for Query.
func (x *graphql__resolver_CrudService) GetQueries(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{
		"GetList": &graphql.Field{
			Type: Gql__type_GetListResponse(),
			Args: graphql.FieldConfigArgument{},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req gql_ptypes_emptypb.Empty
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for GetList")
				}
				client := NewCrudServiceClient(conn)
				resp, err := client.GetList(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC GetList")
				}
				return resp, nil
			},
		},
		"GetOne": &graphql.Field{
			Type: Gql__type_GetOneResponse(),
			Args: graphql.FieldConfigArgument{
				"value": &graphql.ArgumentConfig{
					Type: graphql.Int,
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req gql_ptypes_wrapperspb.Int64Value
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for GetOne")
				}
				client := NewCrudServiceClient(conn)
				resp, err := client.GetOne(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC GetOne")
				}
				return resp, nil
			},
		},
	}
}

// GetMutations returns acceptable graphql.Fields for Mutation.
func (x *graphql__resolver_CrudService) GetMutations(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{
		"Create": &graphql.Field{
			Type: Gql__type_CreateResponse(),
			Args: graphql.FieldConfigArgument{
				"brand": &graphql.ArgumentConfig{
					Type: Gql__input_Brand(),
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req CreateRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for Create")
				}
				client := NewCrudServiceClient(conn)
				resp, err := client.Create(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC Create")
				}
				return resp, nil
			},
		},

		"Update": &graphql.Field{
			Type: Gql__type_UpdateResponse(),
			Args: graphql.FieldConfigArgument{
				"id": &graphql.ArgumentConfig{
					Type: gql_ptypes_wrapperspb.Gql__input_Int64Value(),
				},
				"brand": &graphql.ArgumentConfig{
					Type: Gql__input_Brand(),
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req UpdateRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for Update")
				}
				client := NewCrudServiceClient(conn)
				resp, err := client.Update(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC Update")
				}
				return resp, nil
			},
		},

		"Delete": &graphql.Field{
			Type: gql_ptypes_emptypb.Gql__type_Empty(),
			Args: graphql.FieldConfigArgument{
				"value": &graphql.ArgumentConfig{
					Type: graphql.Int,
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req gql_ptypes_wrapperspb.Int64Value
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for Delete")
				}
				client := NewCrudServiceClient(conn)
				resp, err := client.Delete(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC Delete")
				}
				return resp, nil
			},
		},
	}
}

// Register package divided graphql handler "without" *grpc.ClientConn,
// therefore gRPC connection will be opened and closed automatically.
// Occasionally you may worry about open/close performance for each handling graphql request,
// then you can call RegisterCrudServiceGraphqlHandler with *grpc.ClientConn manually.
func RegisterCrudServiceGraphql(mux *runtime.ServeMux) error {
	return RegisterCrudServiceGraphqlHandler(mux, nil)
}

// Register package divided graphql handler "with" *grpc.ClientConn.
// this function accepts your defined grpc connection, so that we reuse that and never close connection inside.
// You need to close it maunally when application will terminate.
// Otherwise, you can specify automatic opening connection with ServiceOption directive:
//
// service CrudService {
//    option (graphql.service) = {
//        host: "host:port"
//        insecure: true or false
//    };
//
//    ...with RPC definitions
// }
func RegisterCrudServiceGraphqlHandler(mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return mux.AddHandler(new_graphql_resolver_CrudService(conn))
}
